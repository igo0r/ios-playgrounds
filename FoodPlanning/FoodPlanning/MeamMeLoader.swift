//
//  MeamMeLoader.swift
//  MealMe
//
//  Created by Igor Lantushenko on 29/05/2017.
//  Copyright Â© 2017 MealMe. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class MeamMeLoader : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 568), resizing: ResizingBehavior = .aspectFit, minutesAngle: CGFloat = 0) {
        //// General Declarations
        //let trys = UIGraphicsBeginImageContextWithOptions(targetFrame.size, true, 0)
        
        if UIGraphicsGetCurrentContext() == nil {
            return
        }
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 568), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 568)


        //// Color Declarations
        let color2 = UIColor(red: 0.945, green: 0.000, blue: 0.000, alpha: 1.000)
        let clockWhite = UIColor(red: 0.949, green: 0.933, blue: 0.902, alpha: 1.000)
        let blackBackground = UIColor(red: 0.165, green: 0.157, blue: 0.157, alpha: 1.000)
        var blackBackgroundHueComponent: CGFloat = 1
        var blackBackgroundSaturationComponent: CGFloat = 1
        var blackBackgroundBrightnessComponent: CGFloat = 1
        blackBackground.getHue(&blackBackgroundHueComponent, saturation: &blackBackgroundSaturationComponent, brightness: &blackBackgroundBrightnessComponent, alpha: nil)

        let color4 = UIColor(hue: blackBackgroundHueComponent, saturation: blackBackgroundSaturationComponent, brightness: 0.949, alpha: blackBackground.cgColor.alpha)
        let color6 = UIColor(red: 0.965, green: 0.369, blue: 0.004, alpha: 1.000)
        let color8 = UIColor(red: 0.188, green: 0.498, blue: 0.204, alpha: 1.000)
        let color10 = UIColor(red: 0.279, green: 0.593, blue: 0.303, alpha: 1.000)
        let color11 = UIColor(red: 0.736, green: 0.071, blue: 0.071, alpha: 1.000)
        let color12 = UIColor(red: 0.278, green: 0.592, blue: 0.302, alpha: 1.000)
        let color13 = UIColor(red: 0.847, green: 0.824, blue: 0.824, alpha: 1.000)
        let color14 = UIColor(red: 0.847, green: 0.824, blue: 0.824, alpha: 1.000)
        let fillColor = UIColor(red: 0.396, green: 0.612, blue: 0.208, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.533, green: 0.753, blue: 0.341, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.886, green: 0.184, blue: 0.216, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.600, green: 0.271, blue: 0.188, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.263, green: 0.420, blue: 0.110, alpha: 1.000)

        //// Variable Declarations
        let hoursAngle: CGFloat = minutesAngle / 8.0
        
        let currentAngle = abs(fmod(minutesAngle, 360))
        let carrotExpression: CGFloat = currentAngle / 90.0 >= 1 ? 0 : (currentAngle / 45.0 < 1 ? 100.0 / 4500.0 * currentAngle : 2 - 100.0 / 4500.0 * currentAngle)
        let strawberryExpr: CGFloat = currentAngle / 90.0 < 3 || currentAngle / 90.0 >= 4 ? 0 : ((currentAngle - 270) / 45.0 < 1 ? 100.0 / 4500.0 * (currentAngle - 270) : 2 - 100.0 / 4500.0 * (currentAngle - 270))
        let brokolliExpr: CGFloat = currentAngle / 90.0 < 2 || currentAngle / 90.0 >= 3 ? 0 : ((currentAngle - 180) / 45.0 < 1 ? 100.0 / 4500.0 * (currentAngle - 180) : 2 - 100.0 / 4500.0 * (currentAngle - 180))
        let tomatoExpression: CGFloat = currentAngle / 90.0 < 1 || currentAngle / 90.0 >= 2 ? 0 : ((currentAngle - 90) / 45.0 < 1 ? 100.0 / 4500.0 * (currentAngle - 90) : 2 - 100.0 / 4500.0 * (currentAngle - 90))

        //// wholeClock
        //// clock Drawing
        let clockPath = UIBezierPath(ovalIn: CGRect(x: 96, y: 220, width: 128, height: 128))
        color4.setFill()
        clockPath.fill()


        //// arrows
        //// Minutes Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 284)
        context.rotate(by: -minutesAngle * CGFloat.pi/180)

        let minutesPath = UIBezierPath(roundedRect: CGRect(x: -2.5, y: -51.5, width: 5, height: 54), cornerRadius: 2.5)
        blackBackground.setFill()
        minutesPath.fill()

        context.restoreGState()


        //// Hours Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 284)
        context.rotate(by: -hoursAngle * CGFloat.pi/180)

        let hoursPath = UIBezierPath(roundedRect: CGRect(x: -2.5, y: -29.5, width: 5, height: 32), cornerRadius: 2.5)
        blackBackground.setFill()
        hoursPath.fill()

        context.restoreGState()




        //// delimeters
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 158, y: 223, width: 3, height: 7))
        blackBackground.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 213, y: 286)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 7))
        blackBackground.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 158, y: 338, width: 3, height: 7))
        blackBackground.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 99, y: 286)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 7))
        blackBackground.setFill()
        rectangle4Path.fill()

        context.restoreGState()






        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        color2.setFill()
        bezier2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        color6.setFill()
        bezierPath.fill()


        //// carrot
        context.saveGState()
        context.setAlpha(carrotExpression)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 4 Drawing
        context.saveGState()
        context.translateBy(x: 244.25, y: 227.07)
        context.rotate(by: 290.79 * CGFloat.pi/180)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: -15.04, y: 24.91))
        bezier4Path.addCurve(to: CGPoint(x: 39.5, y: 11.29), controlPoint1: CGPoint(x: 3.83, y: 25.25), controlPoint2: CGPoint(x: 22.54, y: 16.96))
        bezier4Path.addCurve(to: CGPoint(x: 49.24, y: -15.38), controlPoint1: CGPoint(x: 49.6, y: 7.91), controlPoint2: CGPoint(x: 55.54, y: 1.4))
        bezier4Path.addCurve(to: CGPoint(x: 24.45, y: -28.58), controlPoint1: CGPoint(x: 42.77, y: -32.58), controlPoint2: CGPoint(x: 34.01, y: -33.74))
        bezier4Path.addCurve(to: CGPoint(x: -23.49, y: 2.53), controlPoint1: CGPoint(x: 9.24, y: -20.37), controlPoint2: CGPoint(x: -11.97, y: -8.96))
        bezier4Path.addCurve(to: CGPoint(x: -27.21, y: 17.51), controlPoint1: CGPoint(x: -28.7, y: 7.72), controlPoint2: CGPoint(x: -27.21, y: 17.51))
        bezier4Path.addCurve(to: CGPoint(x: -15.04, y: 24.91), controlPoint1: CGPoint(x: -27.21, y: 17.51), controlPoint2: CGPoint(x: -23.05, y: 24.77))
        bezier4Path.close()
        color6.setFill()
        bezier4Path.fill()
        clockWhite.setStroke()
        bezier4Path.lineWidth = 3.5
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()

        context.restoreGState()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 254, y: 210, width: 15, height: 2))
        clockWhite.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 230, y: 221, width: 11, height: 3))
        clockWhite.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 227, y: 200, width: 19, height: 2))
        clockWhite.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 231.99, y: 164.9)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 19.49))
        color8.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        //// Rectangle 9 Drawing
        context.saveGState()
        context.translateBy(x: 257.77, y: 162.78)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 3, height: 19.49))
        color8.setFill()
        rectangle9Path.fill()

        context.restoreGState()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 251, y: 234, width: 15, height: 2))
        clockWhite.setFill()
        rectangle10Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Pomidoro
        context.saveGState()
        context.setAlpha(tomatoExpression)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 206, y: 324, width: 79, height: 79))
        color11.setFill()
        ovalPath.fill()


        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 244.36, y: 319.5))
        starPath.addLine(to: CGPoint(x: 254.75, y: 326.42))
        starPath.addLine(to: CGPoint(x: 266.39, y: 327.94))
        starPath.addLine(to: CGPoint(x: 257.99, y: 335.16))
        starPath.addLine(to: CGPoint(x: 259.94, y: 345.32))
        starPath.addLine(to: CGPoint(x: 249.51, y: 340.56))
        starPath.addLine(to: CGPoint(x: 239.08, y: 345.32))
        starPath.addLine(to: CGPoint(x: 241.03, y: 335.16))
        starPath.addLine(to: CGPoint(x: 232.63, y: 327.94))
        starPath.addLine(to: CGPoint(x: 244.27, y: 326.42))
        starPath.addLine(to: CGPoint(x: 244.36, y: 319.5))
        starPath.close()
        color10.setFill()
        starPath.fill()
        color12.setStroke()
        starPath.lineWidth = 3
        starPath.lineJoinStyle = .round
        starPath.stroke()


        //// Bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.7)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 271.15, y: 352.5))
        bezier3Path.addCurve(to: CGPoint(x: 276.4, y: 355.45), controlPoint1: CGPoint(x: 272.8, y: 349.5), controlPoint2: CGPoint(x: 275.3, y: 350.4))
        bezier3Path.addCurve(to: CGPoint(x: 278.5, y: 367.26), controlPoint1: CGPoint(x: 277.5, y: 360.5), controlPoint2: CGPoint(x: 277.5, y: 359.02))
        bezier3Path.addCurve(to: CGPoint(x: 268, y: 383), controlPoint1: CGPoint(x: 279.5, y: 375.5), controlPoint2: CGPoint(x: 269.5, y: 382.5))
        bezier3Path.addCurve(to: CGPoint(x: 271.15, y: 367.26), controlPoint1: CGPoint(x: 266.5, y: 383.5), controlPoint2: CGPoint(x: 270.36, y: 374.88))
        bezier3Path.addCurve(to: CGPoint(x: 271.15, y: 352.5), controlPoint1: CGPoint(x: 271.94, y: 359.63), controlPoint2: CGPoint(x: 269.5, y: 355.5))
        bezier3Path.close()
        color14.setFill()
        bezier3Path.fill()
        color13.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// strawberry
        context.saveGState()
        context.setAlpha(strawberryExpr)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 62.16, y: 182.15))
        bezier5Path.addLine(to: CGPoint(x: 57.43, y: 183.14))
        bezier5Path.addLine(to: CGPoint(x: 52.82, y: 169.35))
        bezier5Path.addLine(to: CGPoint(x: 60.87, y: 167))
        bezier5Path.addLine(to: CGPoint(x: 62.16, y: 182.15))
        bezier5Path.close()
        fillColor.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 72.29, y: 180.66))
        bezier6Path.addCurve(to: CGPoint(x: 76.01, y: 174.93), controlPoint1: CGPoint(x: 74.03, y: 179.08), controlPoint2: CGPoint(x: 75.34, y: 177.17))
        bezier6Path.addCurve(to: CGPoint(x: 64.5, y: 175.9), controlPoint1: CGPoint(x: 67.23, y: 171.65), controlPoint2: CGPoint(x: 64.5, y: 175.9))
        bezier6Path.addCurve(to: CGPoint(x: 61.4, y: 173.27), controlPoint1: CGPoint(x: 64.37, y: 174.17), controlPoint2: CGPoint(x: 63.07, y: 173.44))
        bezier6Path.addLine(to: CGPoint(x: 62.16, y: 182.15))
        bezier6Path.addLine(to: CGPoint(x: 62.16, y: 182.15))
        bezier6Path.addLine(to: CGPoint(x: 62.16, y: 182.15))
        bezier6Path.addLine(to: CGPoint(x: 62.16, y: 182.15))
        bezier6Path.addLine(to: CGPoint(x: 57.43, y: 183.14))
        bezier6Path.addLine(to: CGPoint(x: 57.43, y: 183.14))
        bezier6Path.addLine(to: CGPoint(x: 57.43, y: 183.14))
        bezier6Path.addLine(to: CGPoint(x: 57.43, y: 183.14))
        bezier6Path.addLine(to: CGPoint(x: 54.61, y: 174.69))
        bezier6Path.addCurve(to: CGPoint(x: 53.17, y: 175.9), controlPoint1: CGPoint(x: 53.77, y: 175.12), controlPoint2: CGPoint(x: 53.2, y: 175.56))
        bezier6Path.addCurve(to: CGPoint(x: 41.66, y: 174.93), controlPoint1: CGPoint(x: 53.17, y: 175.9), controlPoint2: CGPoint(x: 50.44, y: 171.65))
        bezier6Path.addCurve(to: CGPoint(x: 45.5, y: 180.81), controlPoint1: CGPoint(x: 42.35, y: 177.24), controlPoint2: CGPoint(x: 43.7, y: 179.21))
        bezier6Path.addCurve(to: CGPoint(x: 28.7, y: 190.25), controlPoint1: CGPoint(x: 38.45, y: 181.82), controlPoint2: CGPoint(x: 31.96, y: 184.25))
        bezier6Path.addCurve(to: CGPoint(x: 50.15, y: 187.21), controlPoint1: CGPoint(x: 45.23, y: 195.21), controlPoint2: CGPoint(x: 50.15, y: 187.21))
        bezier6Path.addCurve(to: CGPoint(x: 60.81, y: 201.73), controlPoint1: CGPoint(x: 51.15, y: 198.08), controlPoint2: CGPoint(x: 59.54, y: 201.29))
        bezier6Path.addCurve(to: CGPoint(x: 71.48, y: 187.21), controlPoint1: CGPoint(x: 62.08, y: 201.29), controlPoint2: CGPoint(x: 70.48, y: 198.08))
        bezier6Path.addCurve(to: CGPoint(x: 89.82, y: 190.25), controlPoint1: CGPoint(x: 71.48, y: 187.21), controlPoint2: CGPoint(x: 73.29, y: 195.21))
        bezier6Path.addCurve(to: CGPoint(x: 72.29, y: 180.66), controlPoint1: CGPoint(x: 86.18, y: 184.21), controlPoint2: CGPoint(x: 79.37, y: 181.66))
        bezier6Path.close()
        fillColor2.setFill()
        bezier6Path.fill()


        //// Group 2
        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 87.07, y: 191.38))
        bezier7Path.addCurve(to: CGPoint(x: 87, y: 191.29), controlPoint1: CGPoint(x: 87.04, y: 191.35), controlPoint2: CGPoint(x: 87.02, y: 191.32))
        bezier7Path.addCurve(to: CGPoint(x: 71.48, y: 187.52), controlPoint1: CGPoint(x: 73.09, y: 194.54), controlPoint2: CGPoint(x: 71.48, y: 187.52))
        bezier7Path.addCurve(to: CGPoint(x: 60.81, y: 201.98), controlPoint1: CGPoint(x: 70.47, y: 198.34), controlPoint2: CGPoint(x: 62.08, y: 201.54))
        bezier7Path.addCurve(to: CGPoint(x: 50.15, y: 187.52), controlPoint1: CGPoint(x: 59.54, y: 201.54), controlPoint2: CGPoint(x: 51.15, y: 198.34))
        bezier7Path.addCurve(to: CGPoint(x: 32.89, y: 191.54), controlPoint1: CGPoint(x: 50.15, y: 187.52), controlPoint2: CGPoint(x: 46.04, y: 194.04))
        bezier7Path.addCurve(to: CGPoint(x: 32.8, y: 191.62), controlPoint1: CGPoint(x: 32.86, y: 191.57), controlPoint2: CGPoint(x: 32.83, y: 191.6))
        bezier7Path.addCurve(to: CGPoint(x: 32.92, y: 191.65), controlPoint1: CGPoint(x: 32.84, y: 191.63), controlPoint2: CGPoint(x: 32.88, y: 191.64))
        bezier7Path.addCurve(to: CGPoint(x: 26.96, y: 210.87), controlPoint1: CGPoint(x: 29.02, y: 195.57), controlPoint2: CGPoint(x: 26.96, y: 201.66))
        bezier7Path.addCurve(to: CGPoint(x: 60, y: 259), controlPoint1: CGPoint(x: 26.96, y: 231.48), controlPoint2: CGPoint(x: 47.69, y: 259))
        bezier7Path.addCurve(to: CGPoint(x: 93.04, y: 210.87), controlPoint1: CGPoint(x: 72.31, y: 259), controlPoint2: CGPoint(x: 93.04, y: 231.48))
        bezier7Path.addCurve(to: CGPoint(x: 86.86, y: 191.43), controlPoint1: CGPoint(x: 93.04, y: 201.48), controlPoint2: CGPoint(x: 90.9, y: 195.34))
        bezier7Path.addCurve(to: CGPoint(x: 87.07, y: 191.38), controlPoint1: CGPoint(x: 86.93, y: 191.42), controlPoint2: CGPoint(x: 87, y: 191.4))
        bezier7Path.close()
        fillColor3.setFill()
        bezier7Path.fill()




        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 41.98, y: 200.37))
        bezier8Path.addCurve(to: CGPoint(x: 40.7, y: 200.37), controlPoint1: CGPoint(x: 41.78, y: 199.73), controlPoint2: CGPoint(x: 40.89, y: 199.73))
        bezier8Path.addCurve(to: CGPoint(x: 38.26, y: 209.73), controlPoint1: CGPoint(x: 40.7, y: 200.37), controlPoint2: CGPoint(x: 38.26, y: 208.91))
        bezier8Path.addCurve(to: CGPoint(x: 39.16, y: 211.92), controlPoint1: CGPoint(x: 38.26, y: 210.56), controlPoint2: CGPoint(x: 38.58, y: 211.34))
        bezier8Path.addCurve(to: CGPoint(x: 41.34, y: 212.83), controlPoint1: CGPoint(x: 39.74, y: 212.5), controlPoint2: CGPoint(x: 40.51, y: 212.83))
        bezier8Path.addCurve(to: CGPoint(x: 43.51, y: 211.92), controlPoint1: CGPoint(x: 42.16, y: 212.83), controlPoint2: CGPoint(x: 42.93, y: 212.5))
        bezier8Path.addCurve(to: CGPoint(x: 44.41, y: 209.73), controlPoint1: CGPoint(x: 44.09, y: 211.34), controlPoint2: CGPoint(x: 44.41, y: 210.56))
        bezier8Path.addCurve(to: CGPoint(x: 41.98, y: 200.37), controlPoint1: CGPoint(x: 44.41, y: 208.91), controlPoint2: CGPoint(x: 41.98, y: 200.37))
        bezier8Path.close()
        fillColor4.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 61, y: 206.82))
        bezier9Path.addCurve(to: CGPoint(x: 59.72, y: 206.82), controlPoint1: CGPoint(x: 60.81, y: 206.19), controlPoint2: CGPoint(x: 59.92, y: 206.19))
        bezier9Path.addCurve(to: CGPoint(x: 57.28, y: 216.19), controlPoint1: CGPoint(x: 59.72, y: 206.82), controlPoint2: CGPoint(x: 57.28, y: 215.37))
        bezier9Path.addCurve(to: CGPoint(x: 58.19, y: 218.38), controlPoint1: CGPoint(x: 57.28, y: 217.02), controlPoint2: CGPoint(x: 57.6, y: 217.79))
        bezier9Path.addCurve(to: CGPoint(x: 60.36, y: 219.28), controlPoint1: CGPoint(x: 58.77, y: 218.96), controlPoint2: CGPoint(x: 59.54, y: 219.28))
        bezier9Path.addCurve(to: CGPoint(x: 62.54, y: 218.38), controlPoint1: CGPoint(x: 61.18, y: 219.28), controlPoint2: CGPoint(x: 61.96, y: 218.96))
        bezier9Path.addCurve(to: CGPoint(x: 63.44, y: 216.19), controlPoint1: CGPoint(x: 63.12, y: 217.79), controlPoint2: CGPoint(x: 63.44, y: 217.02))
        bezier9Path.addCurve(to: CGPoint(x: 61, y: 206.82), controlPoint1: CGPoint(x: 63.44, y: 215.36), controlPoint2: CGPoint(x: 61, y: 206.82))
        bezier9Path.close()
        fillColor4.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 78.97, y: 200.35))
        bezier10Path.addCurve(to: CGPoint(x: 77.69, y: 200.35), controlPoint1: CGPoint(x: 78.78, y: 199.71), controlPoint2: CGPoint(x: 77.89, y: 199.71))
        bezier10Path.addCurve(to: CGPoint(x: 75.25, y: 209.72), controlPoint1: CGPoint(x: 77.69, y: 200.35), controlPoint2: CGPoint(x: 75.25, y: 208.89))
        bezier10Path.addCurve(to: CGPoint(x: 76.16, y: 211.9), controlPoint1: CGPoint(x: 75.25, y: 210.54), controlPoint2: CGPoint(x: 75.57, y: 211.32))
        bezier10Path.addCurve(to: CGPoint(x: 78.33, y: 212.81), controlPoint1: CGPoint(x: 76.74, y: 212.49), controlPoint2: CGPoint(x: 77.51, y: 212.81))
        bezier10Path.addCurve(to: CGPoint(x: 80.51, y: 211.9), controlPoint1: CGPoint(x: 79.16, y: 212.81), controlPoint2: CGPoint(x: 79.93, y: 212.49))
        bezier10Path.addCurve(to: CGPoint(x: 81.41, y: 209.72), controlPoint1: CGPoint(x: 81.09, y: 211.32), controlPoint2: CGPoint(x: 81.41, y: 210.54))
        bezier10Path.addCurve(to: CGPoint(x: 78.97, y: 200.35), controlPoint1: CGPoint(x: 81.41, y: 208.89), controlPoint2: CGPoint(x: 78.97, y: 200.35))
        bezier10Path.close()
        fillColor4.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 49.74, y: 221.37))
        bezier11Path.addCurve(to: CGPoint(x: 48.46, y: 221.37), controlPoint1: CGPoint(x: 49.55, y: 220.74), controlPoint2: CGPoint(x: 48.66, y: 220.74))
        bezier11Path.addCurve(to: CGPoint(x: 46.02, y: 230.74), controlPoint1: CGPoint(x: 48.46, y: 221.37), controlPoint2: CGPoint(x: 46.02, y: 229.91))
        bezier11Path.addCurve(to: CGPoint(x: 46.93, y: 232.92), controlPoint1: CGPoint(x: 46.02, y: 231.56), controlPoint2: CGPoint(x: 46.34, y: 232.34))
        bezier11Path.addCurve(to: CGPoint(x: 49.1, y: 233.83), controlPoint1: CGPoint(x: 47.51, y: 233.51), controlPoint2: CGPoint(x: 48.28, y: 233.83))
        bezier11Path.addCurve(to: CGPoint(x: 51.28, y: 232.92), controlPoint1: CGPoint(x: 49.92, y: 233.83), controlPoint2: CGPoint(x: 50.7, y: 233.51))
        bezier11Path.addCurve(to: CGPoint(x: 52.18, y: 230.74), controlPoint1: CGPoint(x: 51.86, y: 232.34), controlPoint2: CGPoint(x: 52.18, y: 231.56))
        bezier11Path.addCurve(to: CGPoint(x: 49.74, y: 221.37), controlPoint1: CGPoint(x: 52.18, y: 229.91), controlPoint2: CGPoint(x: 49.74, y: 221.37))
        bezier11Path.close()
        fillColor4.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 61, y: 235.85))
        bezier12Path.addCurve(to: CGPoint(x: 59.72, y: 235.85), controlPoint1: CGPoint(x: 60.81, y: 235.22), controlPoint2: CGPoint(x: 59.92, y: 235.22))
        bezier12Path.addCurve(to: CGPoint(x: 57.28, y: 245.22), controlPoint1: CGPoint(x: 59.72, y: 235.85), controlPoint2: CGPoint(x: 57.28, y: 244.4))
        bezier12Path.addCurve(to: CGPoint(x: 58.19, y: 247.41), controlPoint1: CGPoint(x: 57.28, y: 246.05), controlPoint2: CGPoint(x: 57.6, y: 246.83))
        bezier12Path.addCurve(to: CGPoint(x: 60.36, y: 248.32), controlPoint1: CGPoint(x: 58.77, y: 247.99), controlPoint2: CGPoint(x: 59.54, y: 248.32))
        bezier12Path.addCurve(to: CGPoint(x: 62.54, y: 247.41), controlPoint1: CGPoint(x: 61.18, y: 248.32), controlPoint2: CGPoint(x: 61.96, y: 247.99))
        bezier12Path.addCurve(to: CGPoint(x: 63.44, y: 245.22), controlPoint1: CGPoint(x: 63.12, y: 246.83), controlPoint2: CGPoint(x: 63.44, y: 246.05))
        bezier12Path.addCurve(to: CGPoint(x: 61, y: 235.85), controlPoint1: CGPoint(x: 63.44, y: 244.4), controlPoint2: CGPoint(x: 61, y: 235.85))
        bezier12Path.close()
        fillColor4.setFill()
        bezier12Path.fill()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 72.26, y: 221.35))
        bezier13Path.addCurve(to: CGPoint(x: 70.98, y: 221.35), controlPoint1: CGPoint(x: 72.07, y: 220.72), controlPoint2: CGPoint(x: 71.18, y: 220.72))
        bezier13Path.addCurve(to: CGPoint(x: 68.54, y: 230.72), controlPoint1: CGPoint(x: 70.98, y: 221.35), controlPoint2: CGPoint(x: 68.54, y: 229.89))
        bezier13Path.addCurve(to: CGPoint(x: 69.45, y: 232.9), controlPoint1: CGPoint(x: 68.54, y: 231.54), controlPoint2: CGPoint(x: 68.86, y: 232.32))
        bezier13Path.addCurve(to: CGPoint(x: 71.62, y: 233.81), controlPoint1: CGPoint(x: 70.03, y: 233.49), controlPoint2: CGPoint(x: 70.8, y: 233.81))
        bezier13Path.addCurve(to: CGPoint(x: 73.8, y: 232.9), controlPoint1: CGPoint(x: 72.44, y: 233.81), controlPoint2: CGPoint(x: 73.22, y: 233.49))
        bezier13Path.addCurve(to: CGPoint(x: 74.7, y: 230.72), controlPoint1: CGPoint(x: 74.38, y: 232.32), controlPoint2: CGPoint(x: 74.7, y: 231.54))
        bezier13Path.addCurve(to: CGPoint(x: 72.26, y: 221.35), controlPoint1: CGPoint(x: 74.7, y: 229.89), controlPoint2: CGPoint(x: 72.26, y: 221.35))
        bezier13Path.close()
        fillColor4.setFill()
        bezier13Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Brokolli
        context.saveGState()
        context.setAlpha(brokolliExpr)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 84.44, y: 340.76))
        bezier14Path.addCurve(to: CGPoint(x: 82.5, y: 337.52), controlPoint1: CGPoint(x: 84.44, y: 339.37), controlPoint2: CGPoint(x: 83.65, y: 338.16))
        bezier14Path.addCurve(to: CGPoint(x: 83.36, y: 333.84), controlPoint1: CGPoint(x: 83.04, y: 336.41), controlPoint2: CGPoint(x: 83.36, y: 335.16))
        bezier14Path.addCurve(to: CGPoint(x: 74.67, y: 325.31), controlPoint1: CGPoint(x: 83.36, y: 329.13), controlPoint2: CGPoint(x: 79.47, y: 325.31))
        bezier14Path.addCurve(to: CGPoint(x: 71.16, y: 326.04), controlPoint1: CGPoint(x: 73.42, y: 325.31), controlPoint2: CGPoint(x: 72.23, y: 325.57))
        bezier14Path.addCurve(to: CGPoint(x: 65.45, y: 323.18), controlPoint1: CGPoint(x: 69.87, y: 324.31), controlPoint2: CGPoint(x: 67.8, y: 323.18))
        bezier14Path.addCurve(to: CGPoint(x: 59.27, y: 326.76), controlPoint1: CGPoint(x: 62.78, y: 323.18), controlPoint2: CGPoint(x: 60.47, y: 324.63))
        bezier14Path.addCurve(to: CGPoint(x: 54.59, y: 325.31), controlPoint1: CGPoint(x: 57.94, y: 325.85), controlPoint2: CGPoint(x: 56.33, y: 325.31))
        bezier14Path.addCurve(to: CGPoint(x: 46.45, y: 333.3), controlPoint1: CGPoint(x: 50.09, y: 325.31), controlPoint2: CGPoint(x: 46.45, y: 328.89))
        bezier14Path.addCurve(to: CGPoint(x: 46.51, y: 334.28), controlPoint1: CGPoint(x: 46.45, y: 333.63), controlPoint2: CGPoint(x: 46.48, y: 333.96))
        bezier14Path.addCurve(to: CGPoint(x: 41.02, y: 341.83), controlPoint1: CGPoint(x: 43.32, y: 335.36), controlPoint2: CGPoint(x: 41.02, y: 338.33))
        bezier14Path.addCurve(to: CGPoint(x: 44.55, y: 348.41), controlPoint1: CGPoint(x: 41.02, y: 344.56), controlPoint2: CGPoint(x: 42.42, y: 346.97))
        bezier14Path.addCurve(to: CGPoint(x: 43.19, y: 352.49), controlPoint1: CGPoint(x: 43.7, y: 349.56), controlPoint2: CGPoint(x: 43.19, y: 350.96))
        bezier14Path.addCurve(to: CGPoint(x: 50.25, y: 359.42), controlPoint1: CGPoint(x: 43.19, y: 356.31), controlPoint2: CGPoint(x: 46.35, y: 359.42))
        bezier14Path.addCurve(to: CGPoint(x: 54.57, y: 357.96), controlPoint1: CGPoint(x: 51.88, y: 359.42), controlPoint2: CGPoint(x: 53.38, y: 358.87))
        bezier14Path.addCurve(to: CGPoint(x: 61.65, y: 361.55), controlPoint1: CGPoint(x: 56.15, y: 360.13), controlPoint2: CGPoint(x: 58.72, y: 361.55))
        bezier14Path.addCurve(to: CGPoint(x: 68.98, y: 357.58), controlPoint1: CGPoint(x: 64.74, y: 361.55), controlPoint2: CGPoint(x: 67.44, y: 359.96))
        bezier14Path.addCurve(to: CGPoint(x: 74.13, y: 360.48), controlPoint1: CGPoint(x: 70.02, y: 359.31), controlPoint2: CGPoint(x: 71.93, y: 360.48))
        bezier14Path.addCurve(to: CGPoint(x: 80.1, y: 354.62), controlPoint1: CGPoint(x: 77.43, y: 360.48), controlPoint2: CGPoint(x: 80.1, y: 357.86))
        bezier14Path.addCurve(to: CGPoint(x: 79.72, y: 352.56), controlPoint1: CGPoint(x: 80.1, y: 353.89), controlPoint2: CGPoint(x: 79.96, y: 353.2))
        bezier14Path.addCurve(to: CGPoint(x: 83.36, y: 347.16), controlPoint1: CGPoint(x: 81.86, y: 351.67), controlPoint2: CGPoint(x: 83.36, y: 349.59))
        bezier14Path.addCurve(to: CGPoint(x: 82.44, y: 344.04), controlPoint1: CGPoint(x: 83.36, y: 346.01), controlPoint2: CGPoint(x: 83.02, y: 344.94))
        bezier14Path.addCurve(to: CGPoint(x: 84.44, y: 340.76), controlPoint1: CGPoint(x: 83.63, y: 343.41), controlPoint2: CGPoint(x: 84.44, y: 342.19))
        bezier14Path.close()
        fillColor2.setFill()
        bezier14Path.fill()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 53.09, y: 358.8))
        bezier15Path.addCurve(to: CGPoint(x: 50.25, y: 359.42), controlPoint1: CGPoint(x: 52.21, y: 359.18), controlPoint2: CGPoint(x: 51.26, y: 359.42))
        bezier15Path.addCurve(to: CGPoint(x: 43.19, y: 352.49), controlPoint1: CGPoint(x: 46.35, y: 359.42), controlPoint2: CGPoint(x: 43.19, y: 356.31))
        bezier15Path.addCurve(to: CGPoint(x: 44.55, y: 348.41), controlPoint1: CGPoint(x: 43.19, y: 350.96), controlPoint2: CGPoint(x: 43.7, y: 349.56))
        bezier15Path.addCurve(to: CGPoint(x: 41.02, y: 341.83), controlPoint1: CGPoint(x: 42.42, y: 346.97), controlPoint2: CGPoint(x: 41.02, y: 344.56))
        bezier15Path.addCurve(to: CGPoint(x: 41.93, y: 338.16), controlPoint1: CGPoint(x: 41.02, y: 340.51), controlPoint2: CGPoint(x: 41.35, y: 339.26))
        bezier15Path.addCurve(to: CGPoint(x: 34.52, y: 339.03), controlPoint1: CGPoint(x: 39.6, y: 336.78), controlPoint2: CGPoint(x: 36.54, y: 337.06))
        bezier15Path.addCurve(to: CGPoint(x: 34.04, y: 339.58), controlPoint1: CGPoint(x: 34.35, y: 339.21), controlPoint2: CGPoint(x: 34.19, y: 339.39))
        bezier15Path.addCurve(to: CGPoint(x: 27.1, y: 340.71), controlPoint1: CGPoint(x: 31.78, y: 338.5), controlPoint2: CGPoint(x: 28.98, y: 338.87))
        bezier15Path.addCurve(to: CGPoint(x: 25.43, y: 346), controlPoint1: CGPoint(x: 25.64, y: 342.15), controlPoint2: CGPoint(x: 25.09, y: 344.14))
        bezier15Path.addCurve(to: CGPoint(x: 22.54, y: 347.44), controlPoint1: CGPoint(x: 24.37, y: 346.16), controlPoint2: CGPoint(x: 23.35, y: 346.64))
        bezier15Path.addCurve(to: CGPoint(x: 22.54, y: 354.72), controlPoint1: CGPoint(x: 20.49, y: 349.45), controlPoint2: CGPoint(x: 20.49, y: 352.71))
        bezier15Path.addCurve(to: CGPoint(x: 25.59, y: 356.19), controlPoint1: CGPoint(x: 23.39, y: 355.57), controlPoint2: CGPoint(x: 24.48, y: 356.05))
        bezier15Path.addCurve(to: CGPoint(x: 27.39, y: 361.73), controlPoint1: CGPoint(x: 25.26, y: 358.14), controlPoint2: CGPoint(x: 25.85, y: 360.22))
        bezier15Path.addCurve(to: CGPoint(x: 33.37, y: 363.42), controlPoint1: CGPoint(x: 29.01, y: 363.32), controlPoint2: CGPoint(x: 31.29, y: 363.88))
        bezier15Path.addCurve(to: CGPoint(x: 34.52, y: 367.61), controlPoint1: CGPoint(x: 32.99, y: 364.87), controlPoint2: CGPoint(x: 33.37, y: 366.48))
        bezier15Path.addCurve(to: CGPoint(x: 40.8, y: 367.61), controlPoint1: CGPoint(x: 36.26, y: 369.32), controlPoint2: CGPoint(x: 39.07, y: 369.32))
        bezier15Path.addCurve(to: CGPoint(x: 41.7, y: 366.33), controlPoint1: CGPoint(x: 41.19, y: 367.23), controlPoint2: CGPoint(x: 41.49, y: 366.79))
        bezier15Path.addCurve(to: CGPoint(x: 46.51, y: 365.37), controlPoint1: CGPoint(x: 43.31, y: 366.97), controlPoint2: CGPoint(x: 45.21, y: 366.65))
        bezier15Path.addCurve(to: CGPoint(x: 47.7, y: 363.25), controlPoint1: CGPoint(x: 47.13, y: 364.77), controlPoint2: CGPoint(x: 47.52, y: 364.03))
        bezier15Path.addCurve(to: CGPoint(x: 50.51, y: 362.57), controlPoint1: CGPoint(x: 48.66, y: 363.54), controlPoint2: CGPoint(x: 49.75, y: 363.32))
        bezier15Path.addCurve(to: CGPoint(x: 51.22, y: 359.86), controlPoint1: CGPoint(x: 51.25, y: 361.83), controlPoint2: CGPoint(x: 51.48, y: 360.79))
        bezier15Path.addCurve(to: CGPoint(x: 53.09, y: 358.8), controlPoint1: CGPoint(x: 51.89, y: 359.63), controlPoint2: CGPoint(x: 52.51, y: 359.25))
        bezier15Path.close()
        fillColor.setFill()
        bezier15Path.fill()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 98.97, y: 348.56))
        bezier16Path.addCurve(to: CGPoint(x: 98.42, y: 348.08), controlPoint1: CGPoint(x: 98.8, y: 348.38), controlPoint2: CGPoint(x: 98.61, y: 348.23))
        bezier16Path.addCurve(to: CGPoint(x: 97.26, y: 341.27), controlPoint1: CGPoint(x: 99.52, y: 345.86), controlPoint2: CGPoint(x: 99.14, y: 343.11))
        bezier16Path.addCurve(to: CGPoint(x: 91.88, y: 339.63), controlPoint1: CGPoint(x: 95.8, y: 339.84), controlPoint2: CGPoint(x: 93.77, y: 339.29))
        bezier16Path.addCurve(to: CGPoint(x: 90.41, y: 336.79), controlPoint1: CGPoint(x: 91.71, y: 338.59), controlPoint2: CGPoint(x: 91.23, y: 337.59))
        bezier16Path.addCurve(to: CGPoint(x: 82.99, y: 336.79), controlPoint1: CGPoint(x: 88.36, y: 334.78), controlPoint2: CGPoint(x: 85.04, y: 334.78))
        bezier16Path.addCurve(to: CGPoint(x: 82.63, y: 337.21), controlPoint1: CGPoint(x: 82.86, y: 336.92), controlPoint2: CGPoint(x: 82.74, y: 337.07))
        bezier16Path.addCurve(to: CGPoint(x: 82.5, y: 337.53), controlPoint1: CGPoint(x: 82.58, y: 337.31), controlPoint2: CGPoint(x: 82.54, y: 337.42))
        bezier16Path.addCurve(to: CGPoint(x: 84.44, y: 340.77), controlPoint1: CGPoint(x: 83.65, y: 338.16), controlPoint2: CGPoint(x: 84.44, y: 339.37))
        bezier16Path.addCurve(to: CGPoint(x: 82.43, y: 344.04), controlPoint1: CGPoint(x: 84.44, y: 342.19), controlPoint2: CGPoint(x: 83.63, y: 343.41))
        bezier16Path.addCurve(to: CGPoint(x: 83.36, y: 347.16), controlPoint1: CGPoint(x: 83.02, y: 344.94), controlPoint2: CGPoint(x: 83.36, y: 346.01))
        bezier16Path.addCurve(to: CGPoint(x: 79.72, y: 352.56), controlPoint1: CGPoint(x: 83.36, y: 349.59), controlPoint2: CGPoint(x: 81.86, y: 351.67))
        bezier16Path.addCurve(to: CGPoint(x: 80.1, y: 354.62), controlPoint1: CGPoint(x: 79.96, y: 353.2), controlPoint2: CGPoint(x: 80.1, y: 353.89))
        bezier16Path.addCurve(to: CGPoint(x: 74.13, y: 360.48), controlPoint1: CGPoint(x: 80.1, y: 357.86), controlPoint2: CGPoint(x: 77.43, y: 360.48))
        bezier16Path.addCurve(to: CGPoint(x: 71.95, y: 360.07), controlPoint1: CGPoint(x: 73.36, y: 360.48), controlPoint2: CGPoint(x: 72.63, y: 360.33))
        bezier16Path.addCurve(to: CGPoint(x: 72.14, y: 360.33), controlPoint1: CGPoint(x: 72.02, y: 360.15), controlPoint2: CGPoint(x: 72.06, y: 360.25))
        bezier16Path.addCurve(to: CGPoint(x: 74.3, y: 361.49), controlPoint1: CGPoint(x: 72.76, y: 360.93), controlPoint2: CGPoint(x: 73.51, y: 361.32))
        bezier16Path.addCurve(to: CGPoint(x: 75, y: 364.25), controlPoint1: CGPoint(x: 74.01, y: 362.44), controlPoint2: CGPoint(x: 74.23, y: 363.5))
        bezier16Path.addCurve(to: CGPoint(x: 77.76, y: 364.95), controlPoint1: CGPoint(x: 75.74, y: 364.99), controlPoint2: CGPoint(x: 76.81, y: 365.21))
        bezier16Path.addCurve(to: CGPoint(x: 79.28, y: 367.33), controlPoint1: CGPoint(x: 78.07, y: 365.82), controlPoint2: CGPoint(x: 78.57, y: 366.64))
        bezier16Path.addCurve(to: CGPoint(x: 88.41, y: 367.33), controlPoint1: CGPoint(x: 81.8, y: 369.81), controlPoint2: CGPoint(x: 85.89, y: 369.81))
        bezier16Path.addCurve(to: CGPoint(x: 89.87, y: 365.13), controlPoint1: CGPoint(x: 89.07, y: 366.68), controlPoint2: CGPoint(x: 89.55, y: 365.93))
        bezier16Path.addCurve(to: CGPoint(x: 94.41, y: 363.69), controlPoint1: CGPoint(x: 91.47, y: 365.38), controlPoint2: CGPoint(x: 93.17, y: 364.9))
        bezier16Path.addCurve(to: CGPoint(x: 95.73, y: 358.61), controlPoint1: CGPoint(x: 95.81, y: 362.31), controlPoint2: CGPoint(x: 96.25, y: 360.36))
        bezier16Path.addCurve(to: CGPoint(x: 98.97, y: 356.96), controlPoint1: CGPoint(x: 96.92, y: 358.41), controlPoint2: CGPoint(x: 98.06, y: 357.86))
        bezier16Path.addCurve(to: CGPoint(x: 98.97, y: 348.56), controlPoint1: CGPoint(x: 101.34, y: 354.64), controlPoint2: CGPoint(x: 101.34, y: 350.88))
        bezier16Path.close()
        fillColor.setFill()
        bezier16Path.fill()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 77.76, y: 364.95))
        bezier17Path.addCurve(to: CGPoint(x: 75, y: 364.25), controlPoint1: CGPoint(x: 76.81, y: 365.21), controlPoint2: CGPoint(x: 75.75, y: 364.99))
        bezier17Path.addCurve(to: CGPoint(x: 74.21, y: 362.7), controlPoint1: CGPoint(x: 74.55, y: 363.81), controlPoint2: CGPoint(x: 74.29, y: 363.27))
        bezier17Path.addCurve(to: CGPoint(x: 73.9, y: 361.81), controlPoint1: CGPoint(x: 74.16, y: 362.38), controlPoint2: CGPoint(x: 74.05, y: 362.08))
        bezier17Path.addCurve(to: CGPoint(x: 64.54, y: 377.95), controlPoint1: CGPoint(x: 68.39, y: 367.49), controlPoint2: CGPoint(x: 64.54, y: 377.95))
        bezier17Path.addCurve(to: CGPoint(x: 65.52, y: 360.65), controlPoint1: CGPoint(x: 66.37, y: 371.45), controlPoint2: CGPoint(x: 66.08, y: 364.97))
        bezier17Path.addCurve(to: CGPoint(x: 61.64, y: 361.55), controlPoint1: CGPoint(x: 64.35, y: 361.22), controlPoint2: CGPoint(x: 63.04, y: 361.55))
        bezier17Path.addCurve(to: CGPoint(x: 57.87, y: 360.68), controlPoint1: CGPoint(x: 60.29, y: 361.55), controlPoint2: CGPoint(x: 59.01, y: 361.23))
        bezier17Path.addCurve(to: CGPoint(x: 58.92, y: 383.57), controlPoint1: CGPoint(x: 60.33, y: 369.38), controlPoint2: CGPoint(x: 58.92, y: 383.57))
        bezier17Path.addCurve(to: CGPoint(x: 47.76, y: 363.82), controlPoint1: CGPoint(x: 56.29, y: 373.04), controlPoint2: CGPoint(x: 50.5, y: 366.46))
        bezier17Path.addCurve(to: CGPoint(x: 47.27, y: 364.38), controlPoint1: CGPoint(x: 47.57, y: 363.98), controlPoint2: CGPoint(x: 47.39, y: 364.16))
        bezier17Path.addCurve(to: CGPoint(x: 46.51, y: 365.37), controlPoint1: CGPoint(x: 47.07, y: 364.73), controlPoint2: CGPoint(x: 46.82, y: 365.07))
        bezier17Path.addCurve(to: CGPoint(x: 41.7, y: 366.33), controlPoint1: CGPoint(x: 45.21, y: 366.65), controlPoint2: CGPoint(x: 43.31, y: 366.97))
        bezier17Path.addCurve(to: CGPoint(x: 40.8, y: 367.61), controlPoint1: CGPoint(x: 41.49, y: 366.8), controlPoint2: CGPoint(x: 41.19, y: 367.23))
        bezier17Path.addCurve(to: CGPoint(x: 39.22, y: 368.61), controlPoint1: CGPoint(x: 40.34, y: 368.07), controlPoint2: CGPoint(x: 39.79, y: 368.39))
        bezier17Path.addCurve(to: CGPoint(x: 55.41, y: 397.61), controlPoint1: CGPoint(x: 46.27, y: 368.61), controlPoint2: CGPoint(x: 54.37, y: 382.64))
        bezier17Path.addCurve(to: CGPoint(x: 57.52, y: 399.57), controlPoint1: CGPoint(x: 55.49, y: 398.72), controlPoint2: CGPoint(x: 56.41, y: 399.57))
        bezier17Path.addLine(to: CGPoint(x: 64.54, y: 399.57))
        bezier17Path.addCurve(to: CGPoint(x: 66.65, y: 397.69), controlPoint1: CGPoint(x: 65.63, y: 399.57), controlPoint2: CGPoint(x: 66.53, y: 398.76))
        bezier17Path.addCurve(to: CGPoint(x: 80.35, y: 368.18), controlPoint1: CGPoint(x: 67.3, y: 391.99), controlPoint2: CGPoint(x: 69.29, y: 368.18))
        bezier17Path.addCurve(to: CGPoint(x: 79.28, y: 367.33), controlPoint1: CGPoint(x: 79.97, y: 367.94), controlPoint2: CGPoint(x: 79.61, y: 367.66))
        bezier17Path.addCurve(to: CGPoint(x: 77.76, y: 364.95), controlPoint1: CGPoint(x: 78.57, y: 366.64), controlPoint2: CGPoint(x: 78.07, y: 365.82))
        bezier17Path.close()
        fillColor5.setFill()
        bezier17Path.fill()


        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 53.98, y: 342.84))
        bezier18Path.addCurve(to: CGPoint(x: 53.47, y: 342.74), controlPoint1: CGPoint(x: 53.81, y: 342.84), controlPoint2: CGPoint(x: 53.64, y: 342.81))
        bezier18Path.addCurve(to: CGPoint(x: 49.56, y: 333.82), controlPoint1: CGPoint(x: 49.93, y: 341.36), controlPoint2: CGPoint(x: 48.18, y: 337.36))
        bezier18Path.addCurve(to: CGPoint(x: 58.49, y: 329.92), controlPoint1: CGPoint(x: 50.94, y: 330.29), controlPoint2: CGPoint(x: 54.94, y: 328.54))
        bezier18Path.addCurve(to: CGPoint(x: 59.28, y: 331.74), controlPoint1: CGPoint(x: 59.21, y: 330.2), controlPoint2: CGPoint(x: 59.57, y: 331.01))
        bezier18Path.addCurve(to: CGPoint(x: 57.46, y: 332.53), controlPoint1: CGPoint(x: 59, y: 332.46), controlPoint2: CGPoint(x: 58.19, y: 332.81))
        bezier18Path.addCurve(to: CGPoint(x: 52.18, y: 334.85), controlPoint1: CGPoint(x: 55.37, y: 331.71), controlPoint2: CGPoint(x: 53, y: 332.75))
        bezier18Path.addCurve(to: CGPoint(x: 54.49, y: 340.12), controlPoint1: CGPoint(x: 51.36, y: 336.94), controlPoint2: CGPoint(x: 52.4, y: 339.31))
        bezier18Path.addCurve(to: CGPoint(x: 55.29, y: 341.94), controlPoint1: CGPoint(x: 55.21, y: 340.41), controlPoint2: CGPoint(x: 55.57, y: 341.22))
        bezier18Path.addCurve(to: CGPoint(x: 53.98, y: 342.84), controlPoint1: CGPoint(x: 55.07, y: 342.5), controlPoint2: CGPoint(x: 54.54, y: 342.84))
        bezier18Path.close()
        fillColor.setFill()
        bezier18Path.fill()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 89.98, y: 357.54))
        bezier19Path.addCurve(to: CGPoint(x: 87.47, y: 357.07), controlPoint1: CGPoint(x: 89.13, y: 357.54), controlPoint2: CGPoint(x: 88.28, y: 357.39))
        bezier19Path.addCurve(to: CGPoint(x: 83.67, y: 353.42), controlPoint1: CGPoint(x: 85.76, y: 356.4), controlPoint2: CGPoint(x: 84.41, y: 355.1))
        bezier19Path.addCurve(to: CGPoint(x: 84.39, y: 351.57), controlPoint1: CGPoint(x: 83.36, y: 352.71), controlPoint2: CGPoint(x: 83.68, y: 351.88))
        bezier19Path.addCurve(to: CGPoint(x: 86.24, y: 352.29), controlPoint1: CGPoint(x: 85.11, y: 351.26), controlPoint2: CGPoint(x: 85.93, y: 351.58))
        bezier19Path.addCurve(to: CGPoint(x: 88.49, y: 354.45), controlPoint1: CGPoint(x: 86.68, y: 353.29), controlPoint2: CGPoint(x: 87.48, y: 354.06))
        bezier19Path.addCurve(to: CGPoint(x: 91.61, y: 354.39), controlPoint1: CGPoint(x: 89.51, y: 354.85), controlPoint2: CGPoint(x: 90.62, y: 354.83))
        bezier19Path.addCurve(to: CGPoint(x: 93.78, y: 352.14), controlPoint1: CGPoint(x: 92.61, y: 353.95), controlPoint2: CGPoint(x: 93.38, y: 353.15))
        bezier19Path.addCurve(to: CGPoint(x: 93.71, y: 349.02), controlPoint1: CGPoint(x: 94.17, y: 351.13), controlPoint2: CGPoint(x: 94.15, y: 350.02))
        bezier19Path.addCurve(to: CGPoint(x: 94.44, y: 347.17), controlPoint1: CGPoint(x: 93.4, y: 348.31), controlPoint2: CGPoint(x: 93.73, y: 347.48))
        bezier19Path.addCurve(to: CGPoint(x: 96.29, y: 347.9), controlPoint1: CGPoint(x: 95.15, y: 346.86), controlPoint2: CGPoint(x: 95.98, y: 347.18))
        bezier19Path.addCurve(to: CGPoint(x: 96.39, y: 353.16), controlPoint1: CGPoint(x: 97.02, y: 349.58), controlPoint2: CGPoint(x: 97.06, y: 351.45))
        bezier19Path.addCurve(to: CGPoint(x: 92.74, y: 356.96), controlPoint1: CGPoint(x: 95.72, y: 354.88), controlPoint2: CGPoint(x: 94.43, y: 356.23))
        bezier19Path.addCurve(to: CGPoint(x: 89.98, y: 357.54), controlPoint1: CGPoint(x: 91.85, y: 357.35), controlPoint2: CGPoint(x: 90.92, y: 357.54))
        bezier19Path.close()
        fillColor2.setFill()
        bezier19Path.fill()


        //// Bezier 20 Drawing
        let bezier20Path = UIBezierPath()
        bezier20Path.move(to: CGPoint(x: 70.74, y: 354.07))
        bezier20Path.addCurve(to: CGPoint(x: 64.73, y: 350.58), controlPoint1: CGPoint(x: 68.33, y: 354.07), controlPoint2: CGPoint(x: 65.99, y: 352.81))
        bezier20Path.addCurve(to: CGPoint(x: 65.26, y: 348.66), controlPoint1: CGPoint(x: 64.35, y: 349.9), controlPoint2: CGPoint(x: 64.58, y: 349.04))
        bezier20Path.addCurve(to: CGPoint(x: 67.17, y: 349.19), controlPoint1: CGPoint(x: 65.93, y: 348.28), controlPoint2: CGPoint(x: 66.79, y: 348.52))
        bezier20Path.addCurve(to: CGPoint(x: 69.63, y: 351.12), controlPoint1: CGPoint(x: 67.71, y: 350.14), controlPoint2: CGPoint(x: 68.58, y: 350.82))
        bezier20Path.addCurve(to: CGPoint(x: 72.73, y: 350.74), controlPoint1: CGPoint(x: 70.68, y: 351.41), controlPoint2: CGPoint(x: 71.78, y: 351.27))
        bezier20Path.addCurve(to: CGPoint(x: 74.65, y: 348.28), controlPoint1: CGPoint(x: 73.68, y: 350.2), controlPoint2: CGPoint(x: 74.36, y: 349.33))
        bezier20Path.addCurve(to: CGPoint(x: 74.27, y: 345.18), controlPoint1: CGPoint(x: 74.94, y: 347.23), controlPoint2: CGPoint(x: 74.81, y: 346.13))
        bezier20Path.addCurve(to: CGPoint(x: 74.81, y: 343.27), controlPoint1: CGPoint(x: 73.89, y: 344.51), controlPoint2: CGPoint(x: 74.13, y: 343.65))
        bezier20Path.addCurve(to: CGPoint(x: 76.72, y: 343.8), controlPoint1: CGPoint(x: 75.48, y: 342.89), controlPoint2: CGPoint(x: 76.34, y: 343.12))
        bezier20Path.addCurve(to: CGPoint(x: 77.36, y: 349.03), controlPoint1: CGPoint(x: 77.63, y: 345.4), controlPoint2: CGPoint(x: 77.85, y: 347.26))
        bezier20Path.addCurve(to: CGPoint(x: 74.11, y: 353.18), controlPoint1: CGPoint(x: 76.87, y: 350.8), controlPoint2: CGPoint(x: 75.71, y: 352.28))
        bezier20Path.addCurve(to: CGPoint(x: 70.74, y: 354.07), controlPoint1: CGPoint(x: 73.04, y: 353.79), controlPoint2: CGPoint(x: 71.88, y: 354.07))
        bezier20Path.close()
        fillColor.setFill()
        bezier20Path.fill()


        //// Bezier 21 Drawing
        let bezier21Path = UIBezierPath()
        bezier21Path.move(to: CGPoint(x: 65.8, y: 346.49))
        bezier21Path.addCurve(to: CGPoint(x: 62.81, y: 345.81), controlPoint1: CGPoint(x: 64.8, y: 346.49), controlPoint2: CGPoint(x: 63.78, y: 346.27))
        bezier21Path.addCurve(to: CGPoint(x: 59.61, y: 336.61), controlPoint1: CGPoint(x: 59.39, y: 344.15), controlPoint2: CGPoint(x: 57.96, y: 340.03))
        bezier21Path.addCurve(to: CGPoint(x: 61.49, y: 335.96), controlPoint1: CGPoint(x: 59.95, y: 335.91), controlPoint2: CGPoint(x: 60.79, y: 335.62))
        bezier21Path.addCurve(to: CGPoint(x: 62.14, y: 337.83), controlPoint1: CGPoint(x: 62.19, y: 336.29), controlPoint2: CGPoint(x: 62.48, y: 337.13))
        bezier21Path.addCurve(to: CGPoint(x: 64.04, y: 343.28), controlPoint1: CGPoint(x: 61.16, y: 339.86), controlPoint2: CGPoint(x: 62.01, y: 342.3))
        bezier21Path.addCurve(to: CGPoint(x: 69.48, y: 341.38), controlPoint1: CGPoint(x: 66.06, y: 344.25), controlPoint2: CGPoint(x: 68.51, y: 343.41))
        bezier21Path.addCurve(to: CGPoint(x: 71.36, y: 340.73), controlPoint1: CGPoint(x: 69.82, y: 340.69), controlPoint2: CGPoint(x: 70.66, y: 340.39))
        bezier21Path.addCurve(to: CGPoint(x: 72.02, y: 342.61), controlPoint1: CGPoint(x: 72.06, y: 341.07), controlPoint2: CGPoint(x: 72.35, y: 341.91))
        bezier21Path.addCurve(to: CGPoint(x: 65.8, y: 346.49), controlPoint1: CGPoint(x: 70.83, y: 345.06), controlPoint2: CGPoint(x: 68.36, y: 346.49))
        bezier21Path.close()
        fillColor.setFill()
        bezier21Path.fill()


        //// Bezier 22 Drawing
        let bezier22Path = UIBezierPath()
        bezier22Path.move(to: CGPoint(x: 55.12, y: 354.38))
        bezier22Path.addCurve(to: CGPoint(x: 52.36, y: 353.8), controlPoint1: CGPoint(x: 54.18, y: 354.38), controlPoint2: CGPoint(x: 53.25, y: 354.18))
        bezier22Path.addCurve(to: CGPoint(x: 48.81, y: 344.73), controlPoint1: CGPoint(x: 48.88, y: 352.27), controlPoint2: CGPoint(x: 47.29, y: 348.21))
        bezier22Path.addCurve(to: CGPoint(x: 50.66, y: 344.01), controlPoint1: CGPoint(x: 49.12, y: 344.02), controlPoint2: CGPoint(x: 49.94, y: 343.69))
        bezier22Path.addCurve(to: CGPoint(x: 51.38, y: 345.85), controlPoint1: CGPoint(x: 51.37, y: 344.32), controlPoint2: CGPoint(x: 51.69, y: 345.14))
        bezier22Path.addCurve(to: CGPoint(x: 53.49, y: 351.22), controlPoint1: CGPoint(x: 50.48, y: 347.91), controlPoint2: CGPoint(x: 51.43, y: 350.32))
        bezier22Path.addCurve(to: CGPoint(x: 56.61, y: 351.28), controlPoint1: CGPoint(x: 54.49, y: 351.66), controlPoint2: CGPoint(x: 55.6, y: 351.68))
        bezier22Path.addCurve(to: CGPoint(x: 58.86, y: 349.12), controlPoint1: CGPoint(x: 57.62, y: 350.88), controlPoint2: CGPoint(x: 58.42, y: 350.12))
        bezier22Path.addCurve(to: CGPoint(x: 60.71, y: 348.39), controlPoint1: CGPoint(x: 59.17, y: 348.41), controlPoint2: CGPoint(x: 59.99, y: 348.09))
        bezier22Path.addCurve(to: CGPoint(x: 61.43, y: 350.24), controlPoint1: CGPoint(x: 61.42, y: 348.7), controlPoint2: CGPoint(x: 61.74, y: 349.53))
        bezier22Path.addCurve(to: CGPoint(x: 57.64, y: 353.9), controlPoint1: CGPoint(x: 60.7, y: 351.93), controlPoint2: CGPoint(x: 59.35, y: 353.23))
        bezier22Path.addCurve(to: CGPoint(x: 55.12, y: 354.38), controlPoint1: CGPoint(x: 56.82, y: 354.22), controlPoint2: CGPoint(x: 55.97, y: 354.38))
        bezier22Path.close()
        fillColor.setFill()
        bezier22Path.fill()


        //// Bezier 23 Drawing
        let bezier23Path = UIBezierPath()
        bezier23Path.move(to: CGPoint(x: 70.75, y: 339.05))
        bezier23Path.addCurve(to: CGPoint(x: 70.08, y: 339.02), controlPoint1: CGPoint(x: 70.53, y: 339.05), controlPoint2: CGPoint(x: 70.31, y: 339.04))
        bezier23Path.addCurve(to: CGPoint(x: 65.43, y: 336.55), controlPoint1: CGPoint(x: 68.25, y: 338.84), controlPoint2: CGPoint(x: 66.6, y: 337.97))
        bezier23Path.addCurve(to: CGPoint(x: 65.62, y: 334.57), controlPoint1: CGPoint(x: 64.93, y: 335.95), controlPoint2: CGPoint(x: 65.02, y: 335.06))
        bezier23Path.addCurve(to: CGPoint(x: 67.6, y: 334.76), controlPoint1: CGPoint(x: 66.22, y: 334.07), controlPoint2: CGPoint(x: 67.1, y: 334.16))
        bezier23Path.addCurve(to: CGPoint(x: 70.35, y: 336.22), controlPoint1: CGPoint(x: 68.29, y: 335.6), controlPoint2: CGPoint(x: 69.27, y: 336.12))
        bezier23Path.addCurve(to: CGPoint(x: 73.34, y: 335.31), controlPoint1: CGPoint(x: 71.45, y: 336.33), controlPoint2: CGPoint(x: 72.5, y: 336))
        bezier23Path.addCurve(to: CGPoint(x: 73.89, y: 329.57), controlPoint1: CGPoint(x: 75.07, y: 333.88), controlPoint2: CGPoint(x: 75.32, y: 331.31))
        bezier23Path.addCurve(to: CGPoint(x: 74.08, y: 327.6), controlPoint1: CGPoint(x: 73.39, y: 328.97), controlPoint2: CGPoint(x: 73.48, y: 328.09))
        bezier23Path.addCurve(to: CGPoint(x: 76.06, y: 327.79), controlPoint1: CGPoint(x: 74.68, y: 327.1), controlPoint2: CGPoint(x: 75.56, y: 327.19))
        bezier23Path.addCurve(to: CGPoint(x: 75.13, y: 337.48), controlPoint1: CGPoint(x: 78.47, y: 330.71), controlPoint2: CGPoint(x: 78.06, y: 335.06))
        bezier23Path.addCurve(to: CGPoint(x: 70.75, y: 339.05), controlPoint1: CGPoint(x: 73.88, y: 338.5), controlPoint2: CGPoint(x: 72.35, y: 339.05))
        bezier23Path.close()
        fillColor.setFill()
        bezier23Path.fill()


        //// Bezier 24 Drawing
        let bezier24Path = UIBezierPath()
        bezier24Path.move(to: CGPoint(x: 34.89, y: 356))
        bezier24Path.addCurve(to: CGPoint(x: 32.31, y: 355.49), controlPoint1: CGPoint(x: 34.03, y: 356), controlPoint2: CGPoint(x: 33.15, y: 355.84))
        bezier24Path.addCurve(to: CGPoint(x: 28.51, y: 346.53), controlPoint1: CGPoint(x: 28.79, y: 354.07), controlPoint2: CGPoint(x: 27.08, y: 350.04))
        bezier24Path.addCurve(to: CGPoint(x: 30.34, y: 345.75), controlPoint1: CGPoint(x: 28.8, y: 345.81), controlPoint2: CGPoint(x: 29.62, y: 345.46))
        bezier24Path.addCurve(to: CGPoint(x: 31.12, y: 347.58), controlPoint1: CGPoint(x: 31.06, y: 346.04), controlPoint2: CGPoint(x: 31.41, y: 346.86))
        bezier24Path.addCurve(to: CGPoint(x: 33.36, y: 352.89), controlPoint1: CGPoint(x: 30.27, y: 349.66), controlPoint2: CGPoint(x: 31.28, y: 352.05))
        bezier24Path.addCurve(to: CGPoint(x: 38.68, y: 350.65), controlPoint1: CGPoint(x: 35.45, y: 353.74), controlPoint2: CGPoint(x: 37.83, y: 352.73))
        bezier24Path.addCurve(to: CGPoint(x: 40.51, y: 349.87), controlPoint1: CGPoint(x: 38.97, y: 349.93), controlPoint2: CGPoint(x: 39.79, y: 349.58))
        bezier24Path.addCurve(to: CGPoint(x: 41.28, y: 351.7), controlPoint1: CGPoint(x: 41.23, y: 350.17), controlPoint2: CGPoint(x: 41.57, y: 350.98))
        bezier24Path.addCurve(to: CGPoint(x: 34.89, y: 356), controlPoint1: CGPoint(x: 40.19, y: 354.37), controlPoint2: CGPoint(x: 37.61, y: 356))
        bezier24Path.close()
        fillColor2.setFill()
        bezier24Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(MeamMeLoaderResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
